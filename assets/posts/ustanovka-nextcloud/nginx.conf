#Указать правильный server_name (строки 44 и 53)
#Указать правильные пути к файлам ssl сертификата (строки 59 и 60)
#Указать правильный путь к папке www nextcloud (строка 76)
#Указать правильный путь к временной папке (строка 129)

user nextcloud;
worker_processes auto;
worker_cpu_affinity auto;

pcre_jit on;

events
{
	use epoll;
	worker_connections 16384;
	multi_accept on;
}

http
{
	include mime.types;
	default_type application/octet-stream;
	client_max_body_size 16G;
	sendfile on;
	sendfile_max_chunk 512k;
	aio threads;
	tcp_nopush on;
	reset_timedout_connection on;
	send_timeout 30s;
	client_body_timeout 30s;
	proxy_buffer_size 128k;
	proxy_buffers 4 256k;

	upstream php-handler
	{
		server 127.0.0.1:9000;
		#server unix:/var/run/php/php7.2-fpm.sock;
	}

	server
	{
		listen 80;
		listen [::]:80;
		server_name nextcloud.example.com;
		# enforce https
		return 301 https://$server_name:443$request_uri;
	}

	server
	{
		listen 443 ssl http2;
		listen [::]:443 ssl http2;
		server_name nextcloud.example.com;

		# Use Mozilla's guidelines for SSL/TLS settings
		# https://mozilla.github.io/server-side-tls/ssl-config-generator/
		# NOTE: some settings below might be redundant
		ssl_certificate <путь к сертификату, для let's encrypt это файл fullchain.pem>;
		ssl_certificate_key <путь к сертификату, для let's encrypt это файл privkey.pem>;

		add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
		add_header Referrer-Policy "no-referrer" always;
		add_header X-Content-Type-Options "nosniff" always;
		add_header X-Download-Options "noopen" always;
		add_header X-Frame-Options "SAMEORIGIN" always;
		add_header X-Permitted-Cross-Domain-Policies "none" always;
		add_header X-Robots-Tag "none" always;
		add_header X-XSS-Protection "1; mode=block" always;
		#add_header Content-Security-Policy "default-src 'self';" always;

		# Remove X-Powered-By, which is an information leak
		fastcgi_hide_header X-Powered-By;

		# Path to the root of your installation
		root /home/nextcloud/www;

		# Specify how to handle directories -- specifying `/index.php$request_uri`
		# here as the fallback means that Nginx always exhibits the desired behaviour
		# when a client requests a path that corresponds to a directory that exists
		# on the server. In particular, if that directory contains an index.php file,
		# that file is correctly served; if it doesn't, then the request is passed to
		# the front-end controller. This consistent behaviour means that we don't need
		# to specify custom rules for certain paths (e.g. images and other assets,
		# `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
		# `try_files $uri $uri/ /index.php$request_uri`
		# always provides the desired behaviour.
		index index.php index.html /index.php$request_uri;

		# Rule borrowed from `.htaccess` to handle Microsoft DAV clients
		location = /
		{
			if ( $http_user_agent ~ ^DavClnt )
			{
				return 302 /remote.php/webdav/$is_args$args;
			}
		}

		location = /robots.txt
		{
			allow all;
			log_not_found off;
			access_log off;
		}

		# Make a regex exception for `/.well-known` so that clients can still
		# access it despite the existence of the regex rule
		# `location ~ /(\.|autotest|...)` which would otherwise handle requests
		# for `/.well-known`.
		location ^~ /.well-known
		{
			# The following 6 rules are borrowed from `.htaccess`

			location = /.well-known/carddav     { return 301 /remote.php/dav/; }
			location = /.well-known/caldav      { return 301 /remote.php/dav/; }
			# Anything else is dynamically handled by Nextcloud
			location ^~ /.well-known            { return 301 /index.php$uri; }

			try_files $uri $uri/ =404;
		}

		# Rules borrowed from `.htaccess` to hide certain paths from clients
		location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
		location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)              { return 404; }

		# set max upload size
		client_max_body_size 16G;
		client_body_temp_path /home/nextcloud/tmp;
		fastcgi_buffers 64 4K;
		fastcgi_buffer_size 32k;

		# Enable gzip but do not remove ETag headers
		gzip on;
		gzip_vary on;
		gzip_comp_level 4;
		gzip_min_length 256;
		gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
		gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

		# Ensure this block, which passes PHP files to the PHP process, is above the blocks
		# which handle static assets (as seen below). If this block is not declared first,
		# then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
		# to the URI, resulting in a HTTP 500 error response.
		location ~ \.php(?:$|/)
		{
			fastcgi_split_path_info ^(.+?\.php)(/.*)$;
			set $path_info $fastcgi_path_info;

			try_files $fastcgi_script_name =404;

			include fastcgi_params;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			fastcgi_param PATH_INFO $path_info;
			fastcgi_param HTTPS on;

			fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
			fastcgi_param front_controller_active true;     # Enable pretty urls
			fastcgi_pass php-handler;

			fastcgi_intercept_errors on;
			fastcgi_request_buffering off;
			fastcgi_read_timeout 300s;
		}

		location ~ \.(?:css|js|svg|gif)$
		{
			try_files $uri /index.php$request_uri;
			expires 6M;         # Cache-Control policy borrowed from `.htaccess`
			access_log off;     # Optional: Don't log access to assets
		}

		location ~ \.woff2?$
		{
			try_files $uri /index.php$request_uri;
			expires 7d;         # Cache-Control policy borrowed from `.htaccess`
			access_log off;     # Optional: Don't log access to assets
		}

		location /
		{
			try_files $uri $uri/ /index.php$request_uri;
		}
	}
}
